//******************************************************************************
//
// Файл         : ./103c8t6_1/Code/H2.h
//
// Дата         : 21 марта 2019 г.
// Описание     : TODO Заголовочный файл StmPeriphery.h
// Назначение   : Содержит определения типов, переменных и функций,
//                которые используются во всех файлах проекта.
//
// Лицензия     : Creative common 3.0
//
// Автор Ardt2 (c) 2019
//
//******************************************************************************

// Определи макрос, чтобы не допустить повторное включение заголовочного файла.
// Для обеспечения уникальности имени макроса, произведи его от имени файла.
#ifndef __STM_PERIPHERY_H
#define __STM_PERIPHERY_H


#ifdef __cplusplus // Обеспечь совместимость с C++
extern "C"
{
#endif


// ============================================================================
enum class GPIOportX : uint32_t
{
    PortA = RCC_APB2ENR_IOPAEN,
    PortB = RCC_APB2ENR_IOPBEN,
    PortC = RCC_APB2ENR_IOPCEN,

};

//  uint32_t PortMask(GPIOportX n) { return static_cast<uint32_t>n; };

// ----------------------------------------------------------------------------
class TRcc: public ::RCC_TypeDef
{
    private:
        TRcc() = delete;
        ~TRcc() = delete;

    // ========================================================================
    public:
        void Tim1on(void)
        {
            APB2ENR |= RCC_APB2ENR_TIM1EN;
        }
        // --------------------------------------------------------------------
        void Tim1off(void)
        {
            APB2ENR &= ~RCC_APB2ENR_TIM1EN;
        }

        // --------------------------------------------------------------------
        void PortOn(GPIOportX port)
        {
            APB2ENR |= static_cast<uint32_t>(port); // Тактирование GPIO порта
        }
        // --------------------------------------------------------------------
        void PortOff(GPIOportX port)
        {
            APB2ENR &= ~static_cast<uint32_t>(port);
        }


};

// Укажи здесь "extern" объявления общих переменных.
// ----------------------------------------------------------------------------
extern TRcc & ArmClocksControl;


// ============================================================================
class TSysTickTimer : public TIM_TypeDef
{
    public:
        static volatile uint32_t Tick;

    // ========================================================================
    private:
        TSysTickTimer() = delete;
        ~TSysTickTimer() = delete;

    // ========================================================================
    public:
        void Start(void)
        {
            ArmClocksControl.Tim1on();
            SysTick_Config(SystemCoreClock / 1000);
        }
        // --------------------------------------------------------------------

};

// ----------------------------------------------------------------------------
extern TSysTickTimer & SysTimer;


// ============================================================================
class TGpIO : public GPIO_TypeDef
{
    private:
        TGpIO() = delete;
        ~TGpIO() = delete;

    // ========================================================================
    public:
        void SetOutPP(uint8_t n)
        {
            CRH &= ~(0x05 << n);
            CRH |= 0x05 << n;
//          CMSIS_GPIO.MODER |= 0x03u << PinClamp(pin) * 2;     // Если пин -- константа, то это все вычисляется
//          CMSIS_GPIO.MODER &= ~(0x02u << PinClamp(pin) * 2);  // при компиляции и сводится к r.or r.and.
        }
        // --------------------------------------------------------------------
        void On(uint8_t n)
        {
            BSRR = 0x01U << n;
        }

};

// ----------------------------------------------------------------------------
extern TGpIO & PortA;
extern TGpIO & PortB;
extern TGpIO & PortC;


// ============================================================================
// ----------------------------------------------------------------------------
// TODO



#ifdef __cplusplus // Обеспечь совместимость с C++
}
#endif

#endif //__STM_PERIPHERY_H
